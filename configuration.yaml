
# Configure a default setup of Home Assistant (frontend, api, etc)
default_config:

frontend:
  themes: !include themes.yaml

# Uncomment this if you are using SSL/TLS, running in Docker container, etc.
http:
   base_url: !secret duckdns_url

# Text to speech
tts:
  - platform: google_translate

#nest
nest:
  client_id: !secret nest_client_id
  client_secret: !secret nest_client_secret
  project_id: !secret nest_project_id
  subscriber_id: !secret nest_subscriber_id

#enable discovery
discovery:

#influxdb
influxdb:
  api_version: 1
  host: 192.168.1.19
  port: 8086
  exclude:
    entity_globs: "*"

#dryer monitor sensors
binary_sensor:
  - platform: mqtt
    state_topic: 'DRYER_MONITOR/status'
    payload_on: "1"
    payload_off: "0"
    name: 'Dryer Status'
#device tracker
  - platform: ping
    host: 192.168.40.44
    name: 'ping_test'
    scan_interval: 60
    count: 1

sensor:
  - platform: mqtt
    state_topic: 'DRYER_MONITOR/currenttemperature'
    unit_of_measurement: '°F'
    name: 'Current Dryer Temperature'
  - platform: mqtt
    state_topic: 'DRYER_MONITOR/maxtemperature'
    unit_of_measurement: '°F'
    name: 'Max Dryer Temperature'
  - platform: mqtt
    state_topic: 'DRYER_MONITOR/runtime'
    unit_of_measurement: 'minutes'
    name: 'Dryer Runtime'
  #- platform: mqtt
  #  name: Backyard Temperature
  #  device_class: temperature
  #  unit_of_measurement: '°C'
  #  value_template: '{{ value_json.temperature_C }}'
  #  state_topic: rtl_433/Acurite-606TX/180
  #  json_attributes_topic: rtl_433/Acurite-606TX/180
  - platform: influxdb
    host: 192.168.1.19
    port: 8086
    username: ''
    password: ''
    queries:
      - name: Backyard Temp Influx
        unit_of_measurement: '°C'
        value_template: "{{ (value) | float | round(1) }}"
        measurement: '"autogen"."Acurite-606TX"'
        database: rtl_433
        where: "id='180'"
        field: temperature_C
  - platform: rest #moonraker ender3v2 klipper integration
    name: ender_sensor
    resource: "http://192.168.40.153:7125/printer/objects/query?heater_bed&extruder&print_stats&toolhead&display_status&virtual_sdcard"
    json_attributes_path: "$.result.status"
    json_attributes:
      - heater_bed
      - extruder
      - print_stats
      - toolhead
      - display_status
      - virtual_sdcard
    value_template: >-
      {{ 'OK' if ('result' in value_json) else None }}
  - platform: template
    sensors:

      ender3v2_hotend_target:
        friendly_name: 'V0.126 Hotend Target'
        device_class: temperature
        unit_of_measurement: '°C'
        value_template: >-
          {{ states.sensor.ender_sensor.attributes['extruder']['target'] | float | round(1) if is_state('sensor.ender_sensor', 'OK') else None }}
      ender3v2_hotend_actual:
        device_class: temperature
        unit_of_measurement: '°C'
        value_template: >-
          {{ states.sensor.ender_sensor.attributes['extruder']['temperature'] | float | round(1) if is_state('sensor.ender_sensor', 'OK') else None }}
      ender3v2_bed_target:
        device_class: temperature
        unit_of_measurement: '°C'
        value_template: >-
          {{ states.sensor.ender_sensor.attributes['heater_bed']['target'] | float | round(1) if is_state('sensor.ender_sensor', 'OK') else None }}
      ender3v2_bed_actual:
        device_class: temperature
        unit_of_measurement: '°C'
        value_template: >-
          {{ states.sensor.ender_sensor.attributes['heater_bed']['temperature'] | float | round(1) if is_state('sensor.ender_sensor', 'OK') else None }}
      ender3v2_state:
        icon_template: mdi:printer-3d
        value_template: >-
          {{ states.sensor.ender_sensor.attributes['print_stats']['state'] if is_state('sensor.ender_sensor', 'OK') else None }}
      ender3v2_current_print:
        value_template: >-
          {{ states.sensor.ender_sensor.attributes['print_stats']['filename'] if is_state('sensor.ender_sensor', 'OK') else None }}
      ender3v2_current_progress:
        unit_of_measurement: '%'
        icon_template: mdi:file-percent
        value_template: >-
          {{ (states.sensor.ender_sensor.attributes['display_status']['progress'] * 100) | round(1) if is_state('sensor.ender_sensor', 'OK') else None }}
      ender3v2_print_time:
        icon_template: mdi:clock-start
        value_template: >-
          {{ states.sensor.ender_sensor.attributes['print_stats']['print_duration'] | timestamp_custom("%H:%M:%S", 0) if is_state('sensor.ender_sensor', 'OK') else None }}
      ender3v2_time_remaining:
        icon_template: mdi:clock-end
        value_template: >-
          {{ (((states.sensor.ender_sensor.attributes['print_stats']['print_duration'] / states.sensor.ender_sensor.attributes['display_status']['progress'] - states.sensor.ender_sensor.attributes['print_stats']['print_duration']) if states.sensor.ender_sensor.attributes['display_status']['progress'] > 0 else 0) | timestamp_custom('%H:%M:%S', 0)) if is_state('sensor.ender_sensor', 'OK') else None }}
      ender3v2_eta:
        icon_template: mdi:clock-outline
        value_template: >-
          {{ (as_timestamp(now()) + 2 * 60 * 60 + ((states.sensor.ender_sensor.attributes['print_stats']['print_duration'] / states.sensor.ender_sensor.attributes['display_status']['progress'] - states.sensor.ender_sensor.attributes['print_stats']['print_duration']) if states.sensor.ender_sensor.attributes['display_status']['progress'] > 0 else 0)) | timestamp_custom("%H:%M:%S", 0) if is_state('sensor.ender_sensor', 'OK') else None }}
      ender3v2_nozzletemp:
        icon_template: mdi:thermometer
        value_template: >-
          {{ [(states.sensor.ender_sensor.attributes['extruder']['temperature'] | float | round(1) | string), " / ", (states.sensor.ender_sensor.attributes['extruder']['target'] | float | round(1) | string)] | join if is_state('sensor.ender_sensor', 'OK') else None }}
      ender3v2_bedtemp:
        icon_template: mdi:thermometer
        value_template: >-
          {{ [(states.sensor.ender_sensor.attributes['heater_bed']['temperature'] | float | round(1) | string), " / ", (states.sensor.ender_sensor.attributes['heater_bed']['target'] | float | round(1) | string)] | join if is_state('sensor.ender_sensor', 'OK') else None }}

#font door cam
camera:
  - platform: generic
    still_image_url: /local/camera.png
    stream_source: rtsp://USER:PASS@192.168.40.37:554/12
    name: Front Door Cam
    verify_ssl: false
    authentication: basic
    username: admin
    password: !secret camera_pass

#email notifications
notify:
  - name: gmail_notify
    platform: smtp
    server: smtp.gmail.com
    port: 587
    encryption: starttls
    timeout: 15
    username: !secret gmail_username
    password: !secret gmail_password
    sender: !secret gmail_sender
    recipient:
      - !secret my_vtext_number


group: !include groups.yaml
automation: !include automations.yaml
script: !include scripts.yaml
scene: !include scenes.yaml

homeassistant:
  #customize stuff
  customize: !include customize.yaml
